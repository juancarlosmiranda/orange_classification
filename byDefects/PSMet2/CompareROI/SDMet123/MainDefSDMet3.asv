%
% Project: AUTOMATIC CLASSIFICATION OF ORANGES BY SIZE AND DEFECTS USING
% COMPUTER VISION TECHNIQUES
%
% Author: Juan Carlos Miranda. https://github.com/juancarlosmiranda/
% Date: 2018
% Update:  December 2023
%
% Description:
%
% Data obtained after applying a segmentation method is generated and a
% pre-trained defect classifier. In the end you get a list with the 
% classifications of what was detected.
%
% Se generan datos obtenidos luego de aplicar un método de segmentación y
% un clasificador de defectos previamente entrenado. Al final se obtiene un
% listado con las clasificaciones de lo detectado.
%
% Usage:
% MainDefSDMet2.m
%
%
%% Initial parameter setting
clc; clear all; close all;
 
%% Setting script operating parameters
HOME=fullfile('C:','Users','Usuari','development','orange_classification');
mainPath=fullfile(HOME,'OrangeResults','byDefects','PSMet2','CompareROI');
pathImages=fullfile(HOME,'OrangeResults','inputToLearn');
configurationPath=fullfile(mainPath,'conf');
pathAplicacion=fullfile(mainPath,'tmpToLearn','SDMet3');
pathAplicacionSiluetas=fullfile(pathAplicacion,'sFrutas');
outputPath=fullfile(mainPath,'output');

%% Configuration file names work with methods for equivalence with the 4 views
configurationFile=fullfile(configurationPath,'20170916configuracion.xml'); % for initial coordinates in image processing
calibrationFile=fullfile(configurationPath,'20170916calibracion.xml'); % to indicate to the user in the final part of the calibration

 %% Definicion de los cuadros, según numeración 
row01=readConfiguration('Fila1', configurationFile);
bottomRow=readConfiguration('FilaAbajo', configurationFile);

% Rectangle 1 downside
rectangle1_Y=readConfiguration('Cuadro1_lineaGuiaInicialFila', configurationFile);
rectangle1_X=readConfiguration('Cuadro1_lineaGuiaInicialColumna', configurationFile);
rectangle1_H=readConfiguration('Cuadro1_espacioFila', configurationFile);
rectangle1_W=readConfiguration('Cuadro1_espacioColumna', configurationFile);

% Rectangle 2 left side
rectangle2_Y=readConfiguration('Cuadro2_lineaGuiaInicialFila', configurationFile);
rectangle2_X=readConfiguration('Cuadro2_lineaGuiaInicialColumna', configurationFile);
rectangle2_H=readConfiguration('Cuadro2_espacioFila', configurationFile);
rectangle2_WCuadro2_espacioColumna=readConfiguration('Cuadro2_espacioColumna', configurationFile);

%Cuadro 3 centro
Cuadro3_lineaGuiaInicialFila=readConfiguration('Cuadro3_lineaGuiaInicialFila', configurationFile);
Cuadro3_lineaGuiaInicialColumna=readConfiguration('Cuadro3_lineaGuiaInicialColumna', configurationFile);
Cuadro3_espacioFila=readConfiguration('Cuadro3_espacioFila', configurationFile);
Cuadro3_espacioColumna=readConfiguration('Cuadro3_espacioColumna', configurationFile);

%Cuadro 4 derecha
Cuadro4_lineaGuiaInicialFila=readConfiguration('Cuadro4_lineaGuiaInicialFila', configurationFile);
Cuadro4_lineaGuiaInicialColumna=readConfiguration('Cuadro4_lineaGuiaInicialColumna', configurationFile);
Cuadro4_espacioFila=readConfiguration('Cuadro4_espacioFila', configurationFile);
Cuadro4_espacioColumna=readConfiguration('Cuadro4_espacioColumna', configurationFile);

%%carga en memoria para que sea mas rapido
ArrayCuadros=[rectangle1_X, rectangle1_Y, rectangle1_W, rectangle1_H;
rectangle2_X, rectangle2_Y, Cuadro2_espacioColumna, rectangle2_H;
Cuadro3_lineaGuiaInicialColumna, Cuadro3_lineaGuiaInicialFila, Cuadro3_espacioColumna, Cuadro3_espacioFila;
Cuadro4_lineaGuiaInicialColumna, Cuadro4_lineaGuiaInicialFila, Cuadro4_espacioColumna, Cuadro4_espacioFila;
0,0,0,0
];

%% CONFIGURACIONES DE PROCESAMIENTO DE IMAGENES
areaObjetosRemoverBR=5000; % para siluetas y detección de objetos. Tamaño para realizar granulometria
% configuracion de umbrales
canalLMin = 0.0; canalLMax = 96.653; canalAMin = -23.548; canalAMax = 16.303; canalBMin = -28.235; canalBMax = -1.169; %parametros de umbralizacion de fondo


%% CONFIGURACIONES PARA DETECCION DE DEFECTOS
tamanoManchas=1000; %se utiliza para extracción de contornos. Los contornos se encuentran arriba de 1000 pixeles
archivoVectorDef=strcat(outputPath,'aCandidatos.csv'); %archivo de salida candidatos a defectos

% ----- FIN Definicion de topes
%% Remover archivos antiguos, borrar archivos antiguos
%% Cleaning temporal files
% TODO: Create a script for definition of a folder hierarchy
% tmpToLearn/
fprintf('Cleaning old images \n');
delete(candidateFile);
delete(fullfile(outputPath,'sFrutas',imageExtension));
delete(fullfile(outputPath,'sDefectos',imageExtension));
delete(fullfile(outputPath,'roi',imageExtension));
delete(fullfile(outputPath,'removido',imageExtension));
delete(fullfile(outputPath,'deteccion',imageExtension));
delete(fullfile(outputPath,'defectos',imageExtension));
delete(fullfile(outputPath,'contornos',imageExtension));
delete(fullfile(outputPath,'cDefectos',imageExtension));
delete(fullfile(outputPath,'br',imageExtension));


%% --------------------------------------------------------------------
%% Reading training folder with images. Iterates over images
imageList=dir(strcat(pathImages,'*.jpg'));
nombreImagenP='nombreImagenP';
listSize=size(imageList);
imageCount=listSize(1);
%% bach-shaped reading of the camera directory
for n=1:imageCount
    fprintf('Extrayendo características para entrenamiento-> %s \n',imageList(n).name);    
    nombreImagenP=imageList(n).name;    

    ProcessImgSoft(pathImages, pathAplicacion, nombreImagenP, ArrayCuadros, areaObjetosRemoverBR, canalLMin, canalLMax, canalAMin, canalAMax, canalBMin, canalBMax )
    ExtractDefDetectImgSoftSDMet3(pathImages, pathAplicacion, nombreImagenP, archivoVectorDef, tamanoManchas)
    %if n==1
    %    break;
    %end %if n==11
end

%% Printing summary report
fprintf('---------\n');
fprintf('Summary report \n');
fprintf('---------\n');
fprintf('\n -------------------------------- \n');
fprintf('A total of %i files were processed \n',imageCount);
fprintf('Check analysis results in %s \n', candidateFile)
fprintf('\n -------------------------------- \n');
